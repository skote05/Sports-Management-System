{"ast":null,"code":"// Import necessary modules (if any)\nconst express = require('express');\nconst router = express.Router();\n\n// Import your database connection\nconst db = require('../db'); // Adjust this to your actual DB connection file\n\n// Define the API route to schedule a game\nrouter.post('/schedulegame', async (req, res) => {\n  const {\n    teamA_ID,\n    teamB_ID,\n    date,\n    time\n  } = req.body;\n  if (!teamA_ID || !teamB_ID || !date || !time) {\n    return res.status(400).json({\n      message: 'All fields are required.'\n    });\n  }\n  try {\n    // Query to check if there's any conflict in the schedule\n    const conflictQuery = `\n            SELECT COUNT(*) AS conflict_count\n            FROM Match_Teams mt\n            JOIN Match m ON mt.Match_ID = m.Match_ID\n            WHERE mt.Team_ID IN (?, ?)  -- Checking if either team is scheduled on the same date\n            AND m.Date_of_match = ? \n            AND m.Location = ?\n        `;\n\n    // Perform the check for scheduling conflict\n    const [results] = await db.query(conflictQuery, [teamA_ID, teamB_ID, date, time]);\n    if (results[0].conflict_count > 0) {\n      return res.status(400).json({\n        message: 'Schedule conflict detected'\n      });\n    }\n\n    // If no conflict, proceed to insert the match\n    const insertMatchQuery = `\n            INSERT INTO Match (Date_of_match, Location, Sport_ID)\n            VALUES (?, ?, ?)\n        `;\n    const [insertMatchResult] = await db.query(insertMatchQuery, [date, location, sport_ID]);\n\n    // Insert the teams into the Match_Teams table\n    const match_ID = insertMatchResult.insertId;\n    const insertTeamsQuery = `\n            INSERT INTO Match_Teams (Match_ID, Team_ID)\n            VALUES (?, ?), (?, ?)\n        `;\n    await db.query(insertTeamsQuery, [match_ID, teamA_ID, match_ID, teamB_ID]);\n    return res.status(200).json({\n      message: 'Game scheduled successfully!'\n    });\n  } catch (err) {\n    console.error('Error scheduling game:', err);\n    return res.status(500).json({\n      message: 'Error scheduling the game. Please try again.'\n    });\n  }\n});\n\n// Export the router to be used in server.js\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","db","post","req","res","teamA_ID","teamB_ID","date","time","body","status","json","message","conflictQuery","results","query","conflict_count","insertMatchQuery","insertMatchResult","location","sport_ID","match_ID","insertId","insertTeamsQuery","err","console","error","module","exports"],"sources":["/Users/shashankkote/Desktop2/Sports Management System/src/Administrator/ScheduleManagement.js"],"sourcesContent":["// Import necessary modules (if any)\nconst express = require('express');\nconst router = express.Router();\n\n// Import your database connection\nconst db = require('../db');  // Adjust this to your actual DB connection file\n\n// Define the API route to schedule a game\nrouter.post('/schedulegame', async (req, res) => {\n    const { teamA_ID, teamB_ID, date, time } = req.body;\n\n    if (!teamA_ID || !teamB_ID || !date || !time) {\n        return res.status(400).json({ message: 'All fields are required.' });\n    }\n\n    try {\n        // Query to check if there's any conflict in the schedule\n        const conflictQuery = `\n            SELECT COUNT(*) AS conflict_count\n            FROM Match_Teams mt\n            JOIN Match m ON mt.Match_ID = m.Match_ID\n            WHERE mt.Team_ID IN (?, ?)  -- Checking if either team is scheduled on the same date\n            AND m.Date_of_match = ? \n            AND m.Location = ?\n        `;\n\n        // Perform the check for scheduling conflict\n        const [results] = await db.query(conflictQuery, [teamA_ID, teamB_ID, date, time]);\n\n        if (results[0].conflict_count > 0) {\n            return res.status(400).json({ message: 'Schedule conflict detected' });\n        }\n\n        // If no conflict, proceed to insert the match\n        const insertMatchQuery = `\n            INSERT INTO Match (Date_of_match, Location, Sport_ID)\n            VALUES (?, ?, ?)\n        `;\n        const [insertMatchResult] = await db.query(insertMatchQuery, [date, location, sport_ID]);\n\n        // Insert the teams into the Match_Teams table\n        const match_ID = insertMatchResult.insertId;\n        const insertTeamsQuery = `\n            INSERT INTO Match_Teams (Match_ID, Team_ID)\n            VALUES (?, ?), (?, ?)\n        `;\n        await db.query(insertTeamsQuery, [match_ID, teamA_ID, match_ID, teamB_ID]);\n\n        return res.status(200).json({ message: 'Game scheduled successfully!' });\n\n    } catch (err) {\n        console.error('Error scheduling game:', err);\n        return res.status(500).json({ message: 'Error scheduling the game. Please try again.' });\n    }\n});\n\n// Export the router to be used in server.js\nmodule.exports = router;\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;;AAE/B;AACA,MAAMC,EAAE,GAAGH,OAAO,CAAC,OAAO,CAAC,CAAC,CAAE;;AAE9B;AACAC,MAAM,CAACG,IAAI,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC7C,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAGL,GAAG,CAACM,IAAI;EAEnD,IAAI,CAACJ,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,IAAI,IAAI,CAACC,IAAI,EAAE;IAC1C,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA2B,CAAC,CAAC;EACxE;EAEA,IAAI;IACA;IACA,MAAMC,aAAa,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;IAED;IACA,MAAM,CAACC,OAAO,CAAC,GAAG,MAAMb,EAAE,CAACc,KAAK,CAACF,aAAa,EAAE,CAACR,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,CAAC,CAAC;IAEjF,IAAIM,OAAO,CAAC,CAAC,CAAC,CAACE,cAAc,GAAG,CAAC,EAAE;MAC/B,OAAOZ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA6B,CAAC,CAAC;IAC1E;;IAEA;IACA,MAAMK,gBAAgB,GAAG;AACjC;AACA;AACA,SAAS;IACD,MAAM,CAACC,iBAAiB,CAAC,GAAG,MAAMjB,EAAE,CAACc,KAAK,CAACE,gBAAgB,EAAE,CAACV,IAAI,EAAEY,QAAQ,EAAEC,QAAQ,CAAC,CAAC;;IAExF;IACA,MAAMC,QAAQ,GAAGH,iBAAiB,CAACI,QAAQ;IAC3C,MAAMC,gBAAgB,GAAG;AACjC;AACA;AACA,SAAS;IACD,MAAMtB,EAAE,CAACc,KAAK,CAACQ,gBAAgB,EAAE,CAACF,QAAQ,EAAEhB,QAAQ,EAAEgB,QAAQ,EAAEf,QAAQ,CAAC,CAAC;IAE1E,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA+B,CAAC,CAAC;EAE5E,CAAC,CAAC,OAAOY,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;IAC5C,OAAOpB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA+C,CAAC,CAAC;EAC5F;AACJ,CAAC,CAAC;;AAEF;AACAe,MAAM,CAACC,OAAO,GAAG7B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}